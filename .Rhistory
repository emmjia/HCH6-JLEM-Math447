#################################
plasma=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/plasma.txt", header = TRUE)
View(plasma)
#filtration rate example (eg. 6.2 page 257)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/filtration.txt", header = TRUE)
#filtration rate example (eg. 6.2 page 257)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/filtration.txt", header = TRUE)
for (j in 1:4)
View(filtration)
filtration[, j]=as.numeric(coded(filtration[, j]))
filt.lm=lm(Rate ~ A * B * C * D, filtration)
#filtration rate example (eg. 6.2 page 257)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/filtration.txt", header = TRUE)
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
for (j in 1:4)
error[, j]=as.numeric(coded(error[, j]))
error.aov = aov(UEC ~  factor(A)*factor(B)*factor(C)*factor(D), error)
summary(error.aov)
error.aov = aov(UEC ~  factor(A)*factor(B)*factor(C)*factor(D), error)
View(filtration)
Standard.Order = c(8,10,12,9,7,15,2,6,16,13,5,14,1,3,4,11)
Run.Order = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
A = Laser.Power = c("+","+","+","-","-","-","+","+","+","-","-","+","-","-","+","-")
B = Pulse.Freq = c("+","-","+","-","+","+","-","-","+","-","-","-","-","+","+","+")
C = Cell.Size = c("+","-","-","-","+","+","-","+","+","+","+","+","-","-","-","-")
D = Writing.Speed = c("-","+","+","+","-","+","-","-","+","+","-","+","-","-","-","+")
UEC = c(0.8,0.81,0.79,0.6,0.65,0.55,0.98,0.67,0.69,0.56,0.63,0.65,0.75,0.72,0.98,0.63)
error = data.frame(Standard.Order,Run.Order,A,B,C,D,UEC)
for (j in 1:6)
error[, j]=as.numeric(coded(error[, j]))
error.aov = aov(UEC ~  factor(A)*factor(B)*factor(C)*factor(D), error)
summary(error.aov)
View(filtration)
filt.aov=aov(Rate ~ A * B * C * D, filtration)
summary(filt.aov)
summary(filt.aov)
summary(filt.lm)
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
filt.lm=lm(Rate ~ A * B * C * D, filtration)
filt.aov=aov(Rate ~ A * B * C * D, filtration)
#or using half-normal probability plot
library("gplots")
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
filt.lm=lm(Rate ~ A * B * C * D, filtration)
filt.aov=aov(Rate ~ A * B * C * D, filtration)
summary(filt.lm)
summary(filt.aov)
filtration[, j]=as.numeric(coded(filtration[, j]))
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
filtration[, j]=as.numeric(coded(filtration[, j]))
#or using half-normal probability plot
library("gplots")
qqnorm(aov(Rate ~ A * B * C, plasmaLong), label=T)
library(gplots)
#filtration rate example (eg. 6.2 page 257)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/filtration.txt", header = TRUE)
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
filtration[, j]=as.numeric(factor(filtration[, j]))
filt.lm=lm(Rate ~ A * B * C * D, filtration)
filt.aov=aov(Rate ~ A * B * C * D, filtration)
summary(filt.lm)
summary(filt.aov)
View(filtration)
View(filtration)
#filtration rate example (eg. 6.2 page 257)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/filtration.txt", header = TRUE)
#filtration rate example (eg. 6.2 page 257)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/filtration.txt", header = TRUE)
View(filtration)
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
View(filtration)
filt.lm=lm(Rate ~ A * B * C * D, filtration)
filt.aov=aov(Rate ~ A * B * C * D, filtration)
summary(filt.lm)
summary(filt.aov)
#filtration rate example (eg. 6.2 page 257)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/filtration.txt", header = TRUE)
#filtration rate example (eg. 6.2 page 257)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/filtration.txt", header = TRUE)
View(filtration)
#or using half-normal probability plot
library("gplots")
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
filt.lm=lm(Rate ~ A * B * C * D, filtration)
filt.aov=aov(Rate ~ A * B * C * D, filtration)
summary(filt.lm)
summary(filt.aov)
View(filt.lm)
View(filtration)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T)
Standard.Order = c(8,10,12,9,7,15,2,6,16,13,5,14,1,3,4,11)
Run.Order = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
B = Pulse.Freq = c(1,-1,1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,1,1)
C = Cell.Size = c(1,-1,-1,-1,1,1,-1,1,1,1,1,1,-1,-1,-1,-1)
Standard.Order = c(8,10,12,9,7,15,2,6,16,13,5,14,1,3,4,11)
Run.Order = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
A = Laser.Power = c(1,1,1,-1,-1,-1,1,1,1,-1,-1,1,-1,-1,1,-1)
B = Pulse.Freq = c(1,-1,1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,1,1)
C = Cell.Size = c(1,-1,-1,-1,1,1,-1,1,1,1,1,1,-1,-1,-1,-1)
D = Writing.Speed = c(-1,1,1,1,-1,1,-1,-1,1,1,-1,1,-1,-1,-1,1)
UEC = c(0.8,0.81,0.79,0.6,0.65,0.55,0.98,0.67,0.69,0.56,0.63,0.65,0.75,0.72,0.98,0.63)
error = data.frame(Standard.Order,Run.Order,A,B,C,D,UEC)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T)
grid(nx = NULL, ny = nx, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T)
grid(nx = NULL, ny = nx, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
grid(nx = NULL, ny = nx, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
Standard.Order = c(8,10,12,9,7,15,2,6,16,13,5,14,1,3,4,11)
Run.Order = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
A = Laser.Power = c(1,1,1,-1,-1,-1,1,1,1,-1,-1,1,-1,-1,1,-1)
B = Pulse.Freq = c(1,-1,1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,1,1)
C = Cell.Size = c(1,-1,-1,-1,1,1,-1,1,1,1,1,1,-1,-1,-1,-1)
D = Writing.Speed = c(-1,1,1,1,-1,1,-1,-1,1,1,-1,1,-1,-1,-1,1)
UEC = c(0.8,0.81,0.79,0.6,0.65,0.55,0.98,0.67,0.69,0.56,0.63,0.65,0.75,0.72,0.98,0.63)
error = data.frame(Standard.Order,Run.Order,A,B,C,D,UEC)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
error.lm = lm(UEC ~A*B*C*D, error)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
coef=error.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
error.lm = lm(UEC ~A*B*C*D, error)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
coef=error.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
##new model
error.aov = aov(UEC ~ A*C*D, error)
summary(error.aov)
################################################
#    normal and half-normal probability plot  ##
################################################
#plasma example continued
#normal probability plot
qqnorm(plasma.aov, full=T,label=T)
##create response surfaces
plasmaLong=within(plasmaLong, {cA = coded(A); cC = coded(C)})
#aova
plasma.aov=aov(Rate ~ A * B * C, plasmaLong)
#################################
##     2^3    design            #
#################################
plasma=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/plasma.txt", header = TRUE)
plasmaLong=reshape(plasma, varying = c("Rep1", "Rep2"), v.names = "Rate",
direction = "long", timevar = "Rep")
#aova
plasma.aov=aov(Rate ~ A * B * C, plasmaLong)
################################################
#    normal and half-normal probability plot  ##
################################################
#plasma example continued
#normal probability plot
qqnorm(plasma.aov, full=T,label=T)
## click at the "outlier" points and then click "Finish" button
coef=plasma.lm$coefficients[-1]
#connection to linear regression
plasma.lm=lm(Rate ~ coded(A) * coded(B) * coded(C), plasmaLong)
#connection to linear regression
plasma.lm=lm(Rate ~ coded(A) * coded(B) * coded(C), plasmaLong)
#################################
##     2 by 2 design            #
#################################
#Yield data (pp. 234)
yield=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/yield.txt", header = TRUE)
par(mfrow = c(1, 2))
plot(Yield ~ A * B, yield)
with(yield, interaction.plot(A, B, Yield))
#recode the data: x=1 at level +; X=-1 at level -
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
#fitting in linear regression
yield=within(yield, {cA = coded(A); cB = coded(B)}) #adding two columns to the data frame
yield.lm=lm(Yield ~ cA * cB, yield)
summary(yield.lm)
#ANOVA analysis
summary(aov(Yield ~ A * B, yield))
#Model adequacy checking
res=yield$Yield-fitted(yield.lm)
library(car)
#connection to linear regression
plasma.lm=lm(Rate ~ coded(A) * coded(B) * coded(C), plasmaLong)
################################################
#    normal and half-normal probability plot  ##
################################################
#plasma example continued
#normal probability plot
qqnorm(plasma.aov, full=T,label=T)
## click at the "outlier" points and then click "Finish" button
coef=plasma.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
#or using half-normal probability plot
library("gplots")
variables[identify(plot)]
variables[identify(plot)]
qqnorm(aov(Rate ~ A * B * C, plasmaLong), label=T)
#note:option label = TRUE allows labeling points in the plot
plot.half=qqnorm(abs(coef))
variables[identify(plot)]
#filtration rate example (eg. 6.2 page 257)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/filtration.txt", header = TRUE)
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
filt.lm=lm(Rate ~ A * B * C * D, filtration)
filt.aov=aov(Rate ~ A * B * C * D, filtration)
summary(filt.lm)
summary(filt.aov)
################################################
#    normal and half-normal probability plot  ##
################################################
#plasma example continued
#normal probability plot
qqnorm(plasma.aov, full=T,label=T)
## click at the "outlier" points and then click "Finish" button
coef=plasma.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
error.lm = lm(UEC ~A*B*C*D, error)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
coef=error.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
variables[identify(plot)]
variables[identify(plot)]
variables[identify(plot)]
##new model
error.aov = aov(UEC ~ A+C+D, error)
summary(error.aov)
res=error$UEC-fitted(error.lm)
library(car)
qqPlot(res)
plot(fitted(error.lm), res)
plot(coded(error$A), res, xlim=c(-2,2))
plot(coded(error$B), res, xlim=c(-2,2))
plot(error$A, res)
qqPlot(res)
error.lm = lm(UEC~ A*C*D, error)
res=error$UEC-fitted(error.lm)
error.lm2 = lm(UEC~ A*C*D, error)
res=error$UEC-fitted(error.lm2)
library(car)
qqPlot(res)
plot(fitted(error.lm), res)
plot(coded(error$A), res, xlim=c(-2,2))
plot(coded(error$C), res, xlim=c(-2,2))
plot(error$A, res)
plot(error$B, res)
plot(fitted(error.lm2), res)
Run = c(1,2,3,4,5,6,7,8)
A = c("-","+","-","+","-","+","-","_")
source('C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/chapter6_code.R')
Run.Number = c(1:16)
View(filtration)
Filtration.Rate = c(45,71,48,65,68,60,80,65,43,100,45,104,75,86,70,96)
chem.long <- data.frame(Run.Number,A, B, C, D,Run.Label,Filtration.Rate)
Run.Label = c("(1)","a,","b","ab","C","ac","bc","abc","d","ad","bd","abd","cd","acd","bcd","abcd")
Filtration.Rate = c(45,71,48,65,68,60,80,65,43,100,45,104,75,86,70,96)
chem.long <- data.frame(Run.Number,A, B, C, D,Run.Label,Filtration.Rate)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
Run.Number = c(1:16)
Run.Label = c("(1)","a,","b","ab","C","ac","bc","abc","d","ad","bd","abd","cd","acd","bcd","abcd")
B <- rep(c("-", "+"), each = 2, times = 4)
C <- rep(c("-", "+"), each = 4, times = 2)
D <- rep(c("-", "+"), each = 8)
Filtration.Rate = c(45,71,48,65,68,60,80,65,43,100,45,104,75,86,70,96)
chem.long <- data.frame(Run.Number,A, B, C, D,Run.Label,Filtration.Rate)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
View(chem.long)
chem.lm = lm(Filtration.Rate = A*B+A*C+A*D+B*C+B*D*C*D, chem.long)
chem.lm = lm(Filtration.Rate = A*B+A*C+A*D+B*C+B*D*C*D, chem.long)
# creating data table
A <- rep(c("-", "+"), times = 8)
B <- rep(c("-", "+"), each = 2, times = 4)
C <- rep(c("-", "+"), each = 4, times = 2)
D <- rep(c("-", "+"), each = 8)
Filtration.Rate = c(45,71,48,65,68,60,80,65,43,100,45,104,75,86,70,96)
chem.long <- data.frame(Run.Number,A, B, C, D,Run.Label,Filtration.Rate)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
chem.lm = lm(Filtration.Rate = A*B+A*C+A*D+B*C+B*D*C*D, chem.long)
chem.lm = lm(Filtration.Rate = coded(A)*coded(B)+coded(A)*coded(C)+coded(A)*coded(D)+coded(B)*coded(C)+coded(B)*coded(D)*coded(C)*coded(D), chem.long)
summary(chem.lm)
chem.long <- data.frame(Run.Number,A, B, C, D,Filtration.Rate)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
chem.lm = lm(Filtration.Rate = coded(A)*coded(B)+coded(A)*coded(C)+coded(A)*coded(D)+coded(B)*coded(C)+coded(B)*coded(D)*coded(C)*coded(D), chem.long)
summary(chem.lm)
D,Run.Label
chem.long <- data.frame(Run.Number,A, B, C, D,Run.Label,Filtration.Rate)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
chem.lm = lm(Filtration.Rate = coded(A)*coded(B)+coded(A)*coded(C)+coded(A)*coded(D)+coded(B)*coded(C)+coded(B)*coded(D)*coded(C)*coded(D), chem.long)
summary(chem.lm)
chem.lm = lm(Filtration.Rate = coded(A)*coded(B)+coded(A)*coded(C)+coded(A)*coded(D)+coded(B)*coded(C)+coded(B)*coded(D)+coded(C)*coded(D), chem.long)
summary(chem.lm)
chem.long <- data.frame(Run.Number,A, B, C, D,Filtration.Rate)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
chem.lm = lm(Filtration.Rate = coded(A)*coded(B)+coded(A)*coded(C)+coded(A)*coded(D)+coded(B)*coded(C)+coded(B)*coded(D)+coded(C)*coded(D), chem.long)
chem.lm = lm(Filtration.Rate ~ coded(A)*coded(B)+coded(A)*coded(C)+coded(A)*coded(D)+coded(B)*coded(C)+coded(B)*coded(D)+coded(C)*coded(D), chem.long)
summary(chem.lm)
# creating data table
A <- rep(c("-", "+"), times = 8)
B <- rep(c("-", "+"), each = 2, times = 4)
C <- rep(c("-", "+"), each = 4, times = 2)
D <- rep(c("-", "+"), each = 8)
Resistivity <- c(1.92, 11.28, 1.09, 5.75, 2.13, 9.53, 1.03, 5.35, 1.60, 11.73, 1.16, 4.68, 2.16, 9.11, 1.07, 5.30)
wafer.long <- data.frame(Resistivity, A, B, C, D)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
# linear regression
wafer.lm <- lm(Resistivity ~ coded(A) * coded(B) * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long)
summary(wafer.lm)
# creating data table
A <- rep(c("-", "+"), times = 8)
B <- rep(c("-", "+"), each = 2, times = 4)
C <- rep(c("-", "+"), each = 4, times = 2)
D <- rep(c("-", "+"), each = 8)
Resistivity <- c(1.92, 11.28, 1.09, 5.75, 2.13, 9.53, 1.03, 5.35, 1.60, 11.73, 1.16, 4.68, 2.16, 9.11, 1.07, 5.30)
wafer.long <- data.frame(Resistivity, A, B, C, D)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
# linear regression
wafer.lm <- lm(Resistivity ~ coded(A) * coded(B) * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long)
summary(wafer.lm)
# ANOVA test
# normal probability plot
#plot = qqnorm(abs(number))
View(wafer.long)
# linear regression
wafer.lm <- lm(Resistivity ~ coded(A) * coded(B) * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long)
summary(wafer.lm)
# normal probability plot
qqnorm(aov(Resistivity ~ coded(A) * coded(B) * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long), label=T, full=T)
library(gplots)
# normal probability plot
qqnorm(aov(Resistivity ~ coded(A) * coded(B) * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long), label=T, full=T)
coef=error.lm$coefficients[-1]
qqnorm(aov(Resistivity ~ coded(A) * coded(B) * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long), label=T, full=T)
coef=wafer.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
variables[identify(plot)]
qqnorm(aov(Resistivity ~ coded(A) * coded(B) * coded(C) * coded(D), wafer.long), label=T, full=T)
coef=wafer.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
qqnorm(aov(Resistivity ~ coded(A) * coded(B)  + coded(A) * coded(C) + coded(A) * coded(D) + coded(B) * coded(C) + coded(B) * coded(D) + coded(C) * coded(D), wafer.long), label=T, full=T)
coef=wafer.lm$coefficients[-1]
qqnorm(aov(Resistivity ~ coded(A) * coded(B)  + coded(A) * coded(C) + coded(A) * coded(D) + coded(B) * coded(C) + coded(B) * coded(D) + coded(C) * coded(D), wafer.long), label=T, full=T)
coef=wafer.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
View(wafer.long)
View(wafer.long)
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
qqnorm(aov(Resistivity ~ coded(A) * coded(B)  + coded(A) * coded(C) + coded(A) * coded(D) + coded(B) * coded(C) + coded(B) * coded(D) + coded(C) * coded(D), wafer.long), label=T, full=T)
coef=wafer.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
qqnorm(aov(Resistivity ~ coded(A) * coded(B)  * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long), label=T, full=T)
coef=wafer.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
qqnorm(aov(Resistivity ~ coded(A) * coded(B)  * coded(C) * coded(D),  wafer.long), label=T, full=T)
coef=wafer.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
qqnorm(aov(Resistivity ~ coded(A) * coded(B)  * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long), label=T, full=T)
coef=wafer.lm$coefficients[-1]
variables=names(coef)
qqnorm(aov(Resistivity ~ coded(A) * coded(B)  * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long), label=T, full=T)
coef=wafer.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
qqnorm(aov(Resistivity ~ coded(A) * coded(B)  * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long), label=T, full=T)
coef=wafer.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
# linear regression
wafer.lm <- lm(Resistivity ~ coded(A) + coded(B) + coded(A) * coded(B), wafer.long)
summary(wafer.lm)
res=wafer.long$Resitivity-fitted(wafer.lm)
qqPlot(res)
library(gplots)
res=wafer.long$Resitivity-fitted(wafer.lm)
qqPlot(res)
qqplot(res)
res=wafer.long$Resitivity-fitted(wafer.lm)
qqplot(res)
res=cutting.speed.long$yield-fitted(cutting.speed.lm)
qqPlot(res)
# creating data table
factorA = rep(c("-","+","-","+","-","+","-","+"), times = 3)
factorB = rep(c("-","-","+","+","-","-","+","+"), times = 3)
factorC = rep(c("-","-","-","-","+","+","+","+"), times = 3)
Rep = rep(c("I", "II", "III"), each = 8)
yield = c(22,32,35,55,44,40,60,39,31,43,34,47,45,37,50,41,25,29,50,46,38,36,54,47)
cutting.speed.long = data.frame(factorA, factorB, factorC, Rep, yield)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
# linear regression
cutting.speed.lm=lm(yield ~ coded(factorA) * coded(factorB) * coded(factorC), cutting.speed.long)
summary(cutting.speed.lm)
# ANOVA test
cutting.speed.aov=aov(yield ~ factorA * factorB * factorC, cutting.speed.long)
summary(cutting.speed.aov)
mse=summary(cutting.speed.aov)[[1]][8,3]
mse
res=cutting.speed.long$yield-fitted(cutting.speed.lm)
qqPlot(res)
library(gplots)
library("gplots")
# loading libraries
library(car)
# loading libraries
library(car)
library(gplots)
# linear regression
wafer.lm <- lm(Resistivity ~ coded(A) + coded(B) + coded(A) * coded(B), wafer.long)
summary(wafer.lm)
res=wafer.long$Resitivity-fitted(wafer.lm)
qqplot(res)
res=wafer.long$Resistivity-fitted(wafer.lm)
qqplot(res)
qqPlot(res)
plot(fitted(wafer.lm), res)
qqPlot(res)
wafer.lm <- lm(ln(Resistivity) ~ coded(A) + coded(B) + coded(A) * coded(B), wafer.long)
wafer.lm <- lm(log(Resistivity) ~ coded(A) + coded(B) + coded(A) * coded(B), wafer.long)
res=wafer.long$Resistivity-fitted(wafer.lm)
qqPlot(res)
plot(fitted(wafer.lm), res)
qqPlot(res)
qqPlot(res)
plot(fitted(wafer.lm), res)
wafer.lm <- lm(log(Resistivity) ~ coded(A) + coded(B) + coded(A) * coded(B), wafer.long)
res=wafer.long$Resistivity-fitted(wafer.lm)
wafer.lm <- lm(log(Resistivity) ~ coded(A) + coded(B), wafer.long)
summary(wafer.lm)
res=wafer.long$Resistivity-fitted(wafer.lm)
qqPlot(res)
plot(fitted(wafer.lm), res)
qqPlot(res)
wafer.lm3 <- lm(log(Resistivity) ~ coded(A) + coded(B), wafer.long)
summary(wafer.lm)
res=wafer.long$Resistivity-fitted(wafer.lm3)
qqPlot(res)
plot(fitted(wafer.lm3), res)
##
wafer.lm5 <- lm(log(Resistivity) ~ coded(B) + coded(A)*coded(B), wafer.long)
res=wafer.long$Resistivity-fitted(wafer.lm5)
qqPlot(res)
plot(fitted(wafer.lm5), res)
