summary(filt.aov)
summary(filt.lm)
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
filt.lm=lm(Rate ~ A * B * C * D, filtration)
filt.aov=aov(Rate ~ A * B * C * D, filtration)
#or using half-normal probability plot
library("gplots")
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
filt.lm=lm(Rate ~ A * B * C * D, filtration)
filt.aov=aov(Rate ~ A * B * C * D, filtration)
summary(filt.lm)
summary(filt.aov)
filtration[, j]=as.numeric(coded(filtration[, j]))
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
filtration[, j]=as.numeric(coded(filtration[, j]))
#or using half-normal probability plot
library("gplots")
qqnorm(aov(Rate ~ A * B * C, plasmaLong), label=T)
library(gplots)
#filtration rate example (eg. 6.2 page 257)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/filtration.txt", header = TRUE)
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
filtration[, j]=as.numeric(factor(filtration[, j]))
filt.lm=lm(Rate ~ A * B * C * D, filtration)
filt.aov=aov(Rate ~ A * B * C * D, filtration)
summary(filt.lm)
summary(filt.aov)
View(filtration)
View(filtration)
#filtration rate example (eg. 6.2 page 257)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/filtration.txt", header = TRUE)
#filtration rate example (eg. 6.2 page 257)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/filtration.txt", header = TRUE)
View(filtration)
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
View(filtration)
filt.lm=lm(Rate ~ A * B * C * D, filtration)
filt.aov=aov(Rate ~ A * B * C * D, filtration)
summary(filt.lm)
summary(filt.aov)
#filtration rate example (eg. 6.2 page 257)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/filtration.txt", header = TRUE)
#filtration rate example (eg. 6.2 page 257)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/filtration.txt", header = TRUE)
View(filtration)
#or using half-normal probability plot
library("gplots")
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
filt.lm=lm(Rate ~ A * B * C * D, filtration)
filt.aov=aov(Rate ~ A * B * C * D, filtration)
summary(filt.lm)
summary(filt.aov)
View(filt.lm)
View(filtration)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T)
Standard.Order = c(8,10,12,9,7,15,2,6,16,13,5,14,1,3,4,11)
Run.Order = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
B = Pulse.Freq = c(1,-1,1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,1,1)
C = Cell.Size = c(1,-1,-1,-1,1,1,-1,1,1,1,1,1,-1,-1,-1,-1)
Standard.Order = c(8,10,12,9,7,15,2,6,16,13,5,14,1,3,4,11)
Run.Order = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
A = Laser.Power = c(1,1,1,-1,-1,-1,1,1,1,-1,-1,1,-1,-1,1,-1)
B = Pulse.Freq = c(1,-1,1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,1,1)
C = Cell.Size = c(1,-1,-1,-1,1,1,-1,1,1,1,1,1,-1,-1,-1,-1)
D = Writing.Speed = c(-1,1,1,1,-1,1,-1,-1,1,1,-1,1,-1,-1,-1,1)
UEC = c(0.8,0.81,0.79,0.6,0.65,0.55,0.98,0.67,0.69,0.56,0.63,0.65,0.75,0.72,0.98,0.63)
error = data.frame(Standard.Order,Run.Order,A,B,C,D,UEC)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T)
grid(nx = NULL, ny = nx, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T)
grid(nx = NULL, ny = nx, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
grid(nx = NULL, ny = nx, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
Standard.Order = c(8,10,12,9,7,15,2,6,16,13,5,14,1,3,4,11)
Run.Order = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
A = Laser.Power = c(1,1,1,-1,-1,-1,1,1,1,-1,-1,1,-1,-1,1,-1)
B = Pulse.Freq = c(1,-1,1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,1,1)
C = Cell.Size = c(1,-1,-1,-1,1,1,-1,1,1,1,1,1,-1,-1,-1,-1)
D = Writing.Speed = c(-1,1,1,1,-1,1,-1,-1,1,1,-1,1,-1,-1,-1,1)
UEC = c(0.8,0.81,0.79,0.6,0.65,0.55,0.98,0.67,0.69,0.56,0.63,0.65,0.75,0.72,0.98,0.63)
error = data.frame(Standard.Order,Run.Order,A,B,C,D,UEC)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
error.lm = lm(UEC ~A*B*C*D, error)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
coef=error.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
error.lm = lm(UEC ~A*B*C*D, error)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
coef=error.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
##new model
error.aov = aov(UEC ~ A*C*D, error)
summary(error.aov)
################################################
#    normal and half-normal probability plot  ##
################################################
#plasma example continued
#normal probability plot
qqnorm(plasma.aov, full=T,label=T)
##create response surfaces
plasmaLong=within(plasmaLong, {cA = coded(A); cC = coded(C)})
#aova
plasma.aov=aov(Rate ~ A * B * C, plasmaLong)
#################################
##     2^3    design            #
#################################
plasma=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/plasma.txt", header = TRUE)
plasmaLong=reshape(plasma, varying = c("Rep1", "Rep2"), v.names = "Rate",
direction = "long", timevar = "Rep")
#aova
plasma.aov=aov(Rate ~ A * B * C, plasmaLong)
################################################
#    normal and half-normal probability plot  ##
################################################
#plasma example continued
#normal probability plot
qqnorm(plasma.aov, full=T,label=T)
## click at the "outlier" points and then click "Finish" button
coef=plasma.lm$coefficients[-1]
#connection to linear regression
plasma.lm=lm(Rate ~ coded(A) * coded(B) * coded(C), plasmaLong)
#connection to linear regression
plasma.lm=lm(Rate ~ coded(A) * coded(B) * coded(C), plasmaLong)
#################################
##     2 by 2 design            #
#################################
#Yield data (pp. 234)
yield=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/yield.txt", header = TRUE)
par(mfrow = c(1, 2))
plot(Yield ~ A * B, yield)
with(yield, interaction.plot(A, B, Yield))
#recode the data: x=1 at level +; X=-1 at level -
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
#fitting in linear regression
yield=within(yield, {cA = coded(A); cB = coded(B)}) #adding two columns to the data frame
yield.lm=lm(Yield ~ cA * cB, yield)
summary(yield.lm)
#ANOVA analysis
summary(aov(Yield ~ A * B, yield))
#Model adequacy checking
res=yield$Yield-fitted(yield.lm)
library(car)
#connection to linear regression
plasma.lm=lm(Rate ~ coded(A) * coded(B) * coded(C), plasmaLong)
################################################
#    normal and half-normal probability plot  ##
################################################
#plasma example continued
#normal probability plot
qqnorm(plasma.aov, full=T,label=T)
## click at the "outlier" points and then click "Finish" button
coef=plasma.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
#or using half-normal probability plot
library("gplots")
variables[identify(plot)]
variables[identify(plot)]
qqnorm(aov(Rate ~ A * B * C, plasmaLong), label=T)
#note:option label = TRUE allows labeling points in the plot
plot.half=qqnorm(abs(coef))
variables[identify(plot)]
#filtration rate example (eg. 6.2 page 257)
filtration=read.table("C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/filtration.txt", header = TRUE)
for (j in 1:4)
filtration[, j]=as.numeric(coded(filtration[, j]))
filt.lm=lm(Rate ~ A * B * C * D, filtration)
filt.aov=aov(Rate ~ A * B * C * D, filtration)
summary(filt.lm)
summary(filt.aov)
################################################
#    normal and half-normal probability plot  ##
################################################
#plasma example continued
#normal probability plot
qqnorm(plasma.aov, full=T,label=T)
## click at the "outlier" points and then click "Finish" button
coef=plasma.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
error.lm = lm(UEC ~A*B*C*D, error)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
coef=error.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
variables[identify(plot)]
variables[identify(plot)]
variables[identify(plot)]
##new model
error.aov = aov(UEC ~ A+C+D, error)
summary(error.aov)
res=error$UEC-fitted(error.lm)
library(car)
qqPlot(res)
plot(fitted(error.lm), res)
plot(coded(error$A), res, xlim=c(-2,2))
plot(coded(error$B), res, xlim=c(-2,2))
plot(error$A, res)
qqPlot(res)
error.lm = lm(UEC~ A*C*D, error)
res=error$UEC-fitted(error.lm)
error.lm2 = lm(UEC~ A*C*D, error)
res=error$UEC-fitted(error.lm2)
library(car)
qqPlot(res)
plot(fitted(error.lm), res)
plot(coded(error$A), res, xlim=c(-2,2))
plot(coded(error$C), res, xlim=c(-2,2))
plot(error$A, res)
plot(error$B, res)
plot(fitted(error.lm2), res)
Run = c(1,2,3,4,5,6,7,8)
A = c("-","+","-","+","-","+","-","_")
source('C:/Users/Emmanuel/Desktop/SPRING 2018/MATH 447/Chapter 6/chapter6_code.R')
# creating data table
A <- rep(c("-", "+"), times = 8)
B <- rep(c("-", "+"), each = 2, times = 4)
C <- rep(c("-", "+"), each = 4, times = 2)
D <- rep(c("-", "+"), each = 8)
Resistivity <- c(1.92, 11.28, 1.09, 5.75, 2.13, 9.53, 1.03, 5.35, 1.60, 11.73, 1.16, 4.68, 2.16, 9.11, 1.07, 5.30)
wafer.long <- data.frame(Resistivity, A, B, C, D)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
# linear regression
wafer.lm <- lm(Resistivity ~ coded(A) * coded(B) * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long)
summary(wafer.lm)
qqnorm(aov(log(Resistivity) ~ coded(A) * coded(B)  * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long), label=T, full=T)
lirbary(car)
library(car)
library(gplots)
# creating data table
A <- rep(c("-", "+"), times = 8)
B <- rep(c("-", "+"), each = 2, times = 4)
C <- rep(c("-", "+"), each = 4, times = 2)
D <- rep(c("-", "+"), each = 8)
Resistivity <- c(1.92, 11.28, 1.09, 5.75, 2.13, 9.53, 1.03, 5.35, 1.60, 11.73, 1.16, 4.68, 2.16, 9.11, 1.07, 5.30)
wafer.long <- data.frame(Resistivity, A, B, C, D)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
# linear regression
wafer.lm <- lm(Resistivity ~ coded(A) * coded(B) * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long)
summary(wafer.lm)
qqnorm(aov(log(Resistivity) ~ coded(A) * coded(B)  * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long), label=T, full=T)
coef=wafer.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
wafer.lm2 <- lm((Resistivity) ~ coded(A) + coded(B) + coded(A) * coded(B), wafer.long)
res=wafer.long$Resistivity-fitted(wafer.lm2)
qqPlot(res)
plot(fitted(wafer.lm), res)
wafer.lm3 <- lm(Resistivity ~ coded(A) * coded(B) * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long)
res=wafer.long$Resistivity-fitted(wafer.lm3)
qqPlot(res)
wafer.lm3 <- lm(log(Resistivity) ~ coded(A) * coded(B) * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long)
res=wafer.long$Resistivity-fitted(wafer.lm3)
qqPlot(res)
plot(fitted(wafer.lm3), res)
wafer.lm3 <- lm(log(Resistivity) ~ coded(A) * coded(B) * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long)
qqnorm(aov(log(Resistivity) ~ coded(A) * coded(B)  * coded(C) + coded(A) * coded(B) * coded(D) + coded(A) * coded(C) * coded(D) + coded(B) * coded(C) * coded(D), wafer.long), label=T, full=T)
coef=wafer.lm3$coefficients[-1]
variables=names(coef)
variables[identify(plot)]
##A and B
##
wafer.lm4 = lm(Resistivity ~ coded(A) + coded(B), wafer.long); summary(wafer.lm4)
res=wafer.long$Resistivity-fitted(wafer.lm3)
qqPlot(res)
plot(fitted(wafer.lm3), res)
res=wafer.long$Resistivity-fitted(wafer.lm4)
qqPlot(res)
plot(fitted(wafer.lm4), res)
wafer.lm4 = lm(Resistivity ~ coded(A) + coded(B), wafer.long); summary(wafer.lm4)
router.aov = aov(Vibes ~ coded(A) * coded(B), router.long)
library(gplots)
router.aov = aov(Vibes ~ coded(A) * coded(B), router.long)
# creating data table
A <- rep(c("-","+","-","+"), times = 4)
B <- rep(c("-","-","+","+"), times = 4)
Rep <- rep(c("I","II","III","IV"), each = 4)
Vibes <- c(18.2, 27.2, 15.9, 41.0, 18.9, 24.0, 14.5, 43.9, 12.9, 22.4, 15.1, 36.3, 14.4, 22.5, 14.2, 39.9)
router.long <- data.frame(A, B, Rep, Vibes)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
# linear regression
router.lm=lm(Vibes ~ coded(A) * coded(B), router.long)
summary(router.lm)
router.aov = aov(Vibes ~ coded(A) * coded(B), router.long)
qqnorm(router.aov, full=T)
# creating data table
A <- rep(c("-","+","-","+"), times = 4)
B <- rep(c("-","-","+","+"), times = 4)
Rep <- rep(c("I","II","III","IV"), each = 4)
Vibes <- c(18.2, 27.2, 15.9, 41.0, 18.9, 24.0, 14.5, 43.9, 12.9, 22.4, 15.1, 36.3, 14.4, 22.5, 14.2, 39.9)
router.long <- data.frame(A, B, Rep, Vibes)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
# linear regression
router.lm=lm(Vibes ~ coded(A) * coded(B), router.long)
summary(router.lm)
# interaction plot
with(router.long, interaction.plot(A, B, Vibes))
res=router.long$Vibes-fitted(router.lm)
qqPlot(res)
library(car)
qqPlot(res)
plot(fitted(router.lm), res)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1,
ifelse(x == "0", 0, -1))
}
# creating data table
factorA <- c(coded(cutting.speed.long$factorA[1:8]), 0, 0, 0, 0)
factorA = rep(c("-","+","-","+","-","+","-","+"), times = 3)
factorB = rep(c("-","-","+","+","-","-","+","+"), times = 3)
factorC = rep(c("-","-","-","-","+","+","+","+"), times = 3)
Rep = rep(c("I", "II", "III"), each = 8)
yield = c(22,32,35,55,44,40,60,39,31,43,34,47,45,37,50,41,25,29,50,46,38,36,54,47)
cutting.speed.long = data.frame(factorA, factorB, factorC, Rep, yield)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1, -1)
}
View(cutting.speed.long)
# defining coded
coded=function(x) #a function to code variable x
{
ifelse(x=="+", 1,
ifelse(x == "0", 0, -1))
}
# creating data table
factorA <- c(coded(cutting.speed.long$factorA[1:8]), 0, 0, 0, 0)
factorB <- c(coded(cutting.speed.long$factorB[1:8]), 0, 0, 0, 0)
factorC <- c(coded(cutting.speed.long$factorC[1:8]), 0, 0, 0, 0)
yield <- c(cutting.speed.long[1:8, "yield"], 36, 40, 43, 45)
cutting.speed.small <- data.frame(cbind(factorA, factorB, factorC, yield))
View(cutting.speed.small)
# linear regression
cutting.speed.lm2=lm(yield ~ factorA * factorB * factorC + I(factorA^2) + I(factorB^2) + I(factorC^2), cutting.speed.small)
# interaction plot
with(cutting.speed.small, interaction.plot(factorA, factorC, yield))
# interaction plot
with(cutting.speed.small, interaction.plot(factorA, factorC, cutting.speed.small))
summary(cutting.speed.lm2)
qqnorm(aov(yield~factor(A)*factor(B)*factor(C), cutting.speed.small))
qqnorm(aov(yield~factorA*factorB*factorC, cutting.speed.small))
##################
##################
# linear regression
cutting.speed.lm2=lm(yield ~ factorA * factorB * factorC + I(factorA^2) + I(factorB^2) + I(factorC^2), cutting.speed.small)
coef=cutting.speed.lm2$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
#new model
cutting.speed.lm3 = lm(yield ~ factorA + factorB + factorC + factorA*factorC, cutting.speed.small)
res=cutting.speed.small$yield-fitted(cutting.speed.lm2)
qqPlot(res)
plot(fitted(cutting.speed.lm2), res)
res=cutting.speed.small$yield-fitted(cutting.speed.lm2)
qqPlot(res)
plot(fitted(cutting.speed.lm2), res)
cutting.speed.lm3 = lm(yield ~ factorA + factorB + factorC + factorA*factorC, cutting.speed.small)
res=cutting.speed.small$yield-fitted(cutting.speed.lm3)
qqPlot(res)
plot(fitted(cutting.speed.lm2), res)
########################################################################################################
########################################################################################################
########################################################################################################
########################################################################################################
########################################################################################################
########################################################################################################
########################################################################################################
# creating data table
A = Laser.Power = c(1,1,1,-1,-1,-1,1,1,1,-1,-1,1,-1,-1,1,-1,0,0,0,0)
B = Pulse.Freq = c(1,-1,1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,1,1,0,0,0,0)
C = Cell.Size = c(1,-1,-1,-1,1,1,-1,1,1,1,1,1,-1,-1,-1,-1,0,0,0,0)
D = Writing.Speed = c(-1,1,1,1,-1,1,-1,-1,1,1,-1,1,-1,-1,-1,1,0,0,0,0)
UEC = c(0.8,0.81,0.79,0.6,0.65,0.55,0.98,0.67,0.69,0.56,0.63,0.65,0.75,0.72,0.98,0.63,0.98,0.95,0.93,0.96)
error2 = data.frame(A,B,C,D,UEC)
#linear regression
error.lm21 <- lm(UEC ~ A * B * C * D + I(A^2) + I(B^2) + I(C^2) + I(D^2), error2)
summary(error.lm21)
# ANOVA test
error.aov21 <- aov(UEC ~ A * B * C * D + I(A^2) + I(B^2) + I(C^2) + I(D^2), error2)
summary(error.aov21)
#####
qqnorm(error.aov21)
coef=error.aov21$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
error.lmtest22 = lm(UEC ~ A + I(A^2), error2)
summary(error.lmtest22)
res=error2$UEC-fitted(error.lmtest22)
qqPlot(res)
plot(fitted(error.lmtest22), res)
res=error2$UEC-fitted(error.lmtest22)
cutting.speed.lm3 = lm(yield ~ factorA + factorB + factorC + factorA*factorC, cutting.speed.small)
res=cutting.speed.small$yield-fitted(cutting.speed.lm3)
qqPlot(res)
plot(fitted(cutting.speed.lm2), res)
res=error2$UEC-fitted(error.lmtest22)
qqPlot(res)
plot(fitted(error.lmtest22), res)
error.lmtest22 = lm(UEC ~ A + I(A^2), error2)
res=error2$UEC-fitted(error.lmtest22)
qqPlot(res)
plot(fitted(error.lmtest22), res)
qqPlot(res)
plot(fitted(error.lmtest22), res)
#####
qqnorm(error.aov21)
#linear regression
error.lm21 <- lm(UEC ~ A * B * C * D + I(A^2) + I(B^2) + I(C^2) + I(D^2), error2)
summary(error.lm21)
# ANOVA test
error.aov21 <- aov(UEC ~ A * B * C * D + I(A^2) + I(B^2) + I(C^2) + I(D^2), error2)
summary(error.aov21)
# rebuild model
error.lm22 <- lm(UEC ~ A*C + C*D + I(A^2) + I(B^2) + I(C^2) + I(D^2), error2)
summary(error.lm22)
error.aov22 <- aov(UEC ~A*C + C*D + I(A^2) + I(B^2) + I(C^2) + I(D^2), error2)
summary(error.aov22)
# interaction plot
with(error2, interaction.plot(A, C, UEC))
with(error2, interaction.plot(C, D, UEC))
# checking model adequacy
res=error2$UEC-fitted(error.lm22)
qqPlot(res)
plot(fitted(error.lm22), res)
coef=error.aov21$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
coef=error.aov21$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
# checking model adequacy
res=bottle.long$pulse-fitted(bottle.lm)
letter = c("A","B","C","D","AB","AC","AD","BC","BD","CD","ABC","ABD","ACD","BCD","ABCD")
number = c(76.95,-67.52,-7.84,-18.73,-51.32,11.69,9.78,20.79,14.74,1.27,-2.82,-6.50,10.20,-7.98,-6.25)
experiment = data.frame(letter, number)
experiment.aov = aov(number ~ coded(letter), experiment)
plot = qqnorm(abs(number))
## click at the "outlier" points and then click "Finish" button
lister = sort(abs(number))
qqnorm(lister)
lister
##new model
error.aov = aov(UEC ~ A+C+D, error)
error.lm = lm(UEC ~A*B*C*D, error)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
Standard.Order = c(8,10,12,9,7,15,2,6,16,13,5,14,1,3,4,11)
Run.Order = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
A = Laser.Power = c(1,1,1,-1,-1,-1,1,1,1,-1,-1,1,-1,-1,1,-1)
B = Pulse.Freq = c(1,-1,1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,1,1)
C = Cell.Size = c(1,-1,-1,-1,1,1,-1,1,1,1,1,1,-1,-1,-1,-1)
D = Writing.Speed = c(-1,1,1,1,-1,1,-1,-1,1,1,-1,1,-1,-1,-1,1)
UEC = c(0.8,0.81,0.79,0.6,0.65,0.55,0.98,0.67,0.69,0.56,0.63,0.65,0.75,0.72,0.98,0.63)
error = data.frame(Standard.Order,Run.Order,A,B,C,D,UEC)
error.lm = lm(UEC ~A*B*C*D, error)
qqnorm(aov(UEC ~ A * B * C * D, error), label=T, full=T)
coef=error.lm$coefficients[-1]
variables=names(coef)
plot=qqnorm(coef)
variables[identify(plot)]
##new model
error.aov = aov(UEC ~ A+C+D, error)
summary(error.aov)
error.lm2 = lm(UEC~ A+C+D, error)
res=error$UEC-fitted(error.lm2)
library(car)
qqPlot(res)
plot(fitted(error.lm2), res)
